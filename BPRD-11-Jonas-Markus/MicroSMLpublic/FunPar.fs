// Implementation file for parser generated by fsyacc
module FunPar
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "FunPar.fsy"

 (* File Fun/FunPar.fsy 
    Parser for micro-SML, a small functional language; one-argument functions.
    sestoft@itu.dk * 2009-10-19
  *)

 open Absyn;

# 15 "FunPar.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | COMMA
  | FST
  | SND
  | LPAR
  | RPAR
  | SEMICOLON
  | COLON
  | CONS
  | NIL
  | HEAD
  | TAIL
  | EQ
  | NE
  | GT
  | LT
  | GE
  | LE
  | SEQAND
  | SEQOR
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | MOD
  | FUN
  | FN
  | RARROW
  | AND
  | TRY
  | WITH
  | EXN
  | RAISE
  | BEGIN
  | ELSE
  | END
  | FALSE
  | IF
  | IN
  | LET
  | VAL
  | NOT
  | THEN
  | TRUE
  | PRIM1 of (string)
  | CSTBOOL of (bool)
  | NAME of (string)
  | CSTINT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_COMMA
    | TOKEN_FST
    | TOKEN_SND
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_SEMICOLON
    | TOKEN_COLON
    | TOKEN_CONS
    | TOKEN_NIL
    | TOKEN_HEAD
    | TOKEN_TAIL
    | TOKEN_EQ
    | TOKEN_NE
    | TOKEN_GT
    | TOKEN_LT
    | TOKEN_GE
    | TOKEN_LE
    | TOKEN_SEQAND
    | TOKEN_SEQOR
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_MOD
    | TOKEN_FUN
    | TOKEN_FN
    | TOKEN_RARROW
    | TOKEN_AND
    | TOKEN_TRY
    | TOKEN_WITH
    | TOKEN_EXN
    | TOKEN_RAISE
    | TOKEN_BEGIN
    | TOKEN_ELSE
    | TOKEN_END
    | TOKEN_FALSE
    | TOKEN_IF
    | TOKEN_IN
    | TOKEN_LET
    | TOKEN_VAL
    | TOKEN_NOT
    | TOKEN_THEN
    | TOKEN_TRUE
    | TOKEN_PRIM1
    | TOKEN_CSTBOOL
    | TOKEN_NAME
    | TOKEN_CSTINT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_Valdecs
    | NONTERM_Valdec
    | NONTERM_AndFunDecs
    | NONTERM_Expr
    | NONTERM_AtExpr
    | NONTERM_AppExpr
    | NONTERM_Const

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | COMMA  -> 1 
  | FST  -> 2 
  | SND  -> 3 
  | LPAR  -> 4 
  | RPAR  -> 5 
  | SEMICOLON  -> 6 
  | COLON  -> 7 
  | CONS  -> 8 
  | NIL  -> 9 
  | HEAD  -> 10 
  | TAIL  -> 11 
  | EQ  -> 12 
  | NE  -> 13 
  | GT  -> 14 
  | LT  -> 15 
  | GE  -> 16 
  | LE  -> 17 
  | SEQAND  -> 18 
  | SEQOR  -> 19 
  | PLUS  -> 20 
  | MINUS  -> 21 
  | TIMES  -> 22 
  | DIV  -> 23 
  | MOD  -> 24 
  | FUN  -> 25 
  | FN  -> 26 
  | RARROW  -> 27 
  | AND  -> 28 
  | TRY  -> 29 
  | WITH  -> 30 
  | EXN  -> 31 
  | RAISE  -> 32 
  | BEGIN  -> 33 
  | ELSE  -> 34 
  | END  -> 35 
  | FALSE  -> 36 
  | IF  -> 37 
  | IN  -> 38 
  | LET  -> 39 
  | VAL  -> 40 
  | NOT  -> 41 
  | THEN  -> 42 
  | TRUE  -> 43 
  | PRIM1 _ -> 44 
  | CSTBOOL _ -> 45 
  | NAME _ -> 46 
  | CSTINT _ -> 47 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_COMMA 
  | 2 -> TOKEN_FST 
  | 3 -> TOKEN_SND 
  | 4 -> TOKEN_LPAR 
  | 5 -> TOKEN_RPAR 
  | 6 -> TOKEN_SEMICOLON 
  | 7 -> TOKEN_COLON 
  | 8 -> TOKEN_CONS 
  | 9 -> TOKEN_NIL 
  | 10 -> TOKEN_HEAD 
  | 11 -> TOKEN_TAIL 
  | 12 -> TOKEN_EQ 
  | 13 -> TOKEN_NE 
  | 14 -> TOKEN_GT 
  | 15 -> TOKEN_LT 
  | 16 -> TOKEN_GE 
  | 17 -> TOKEN_LE 
  | 18 -> TOKEN_SEQAND 
  | 19 -> TOKEN_SEQOR 
  | 20 -> TOKEN_PLUS 
  | 21 -> TOKEN_MINUS 
  | 22 -> TOKEN_TIMES 
  | 23 -> TOKEN_DIV 
  | 24 -> TOKEN_MOD 
  | 25 -> TOKEN_FUN 
  | 26 -> TOKEN_FN 
  | 27 -> TOKEN_RARROW 
  | 28 -> TOKEN_AND 
  | 29 -> TOKEN_TRY 
  | 30 -> TOKEN_WITH 
  | 31 -> TOKEN_EXN 
  | 32 -> TOKEN_RAISE 
  | 33 -> TOKEN_BEGIN 
  | 34 -> TOKEN_ELSE 
  | 35 -> TOKEN_END 
  | 36 -> TOKEN_FALSE 
  | 37 -> TOKEN_IF 
  | 38 -> TOKEN_IN 
  | 39 -> TOKEN_LET 
  | 40 -> TOKEN_VAL 
  | 41 -> TOKEN_NOT 
  | 42 -> TOKEN_THEN 
  | 43 -> TOKEN_TRUE 
  | 44 -> TOKEN_PRIM1 
  | 45 -> TOKEN_CSTBOOL 
  | 46 -> TOKEN_NAME 
  | 47 -> TOKEN_CSTINT 
  | 50 -> TOKEN_end_of_input
  | 48 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startMain 
    | 1 -> NONTERM_Main 
    | 2 -> NONTERM_Valdecs 
    | 3 -> NONTERM_Valdecs 
    | 4 -> NONTERM_Valdec 
    | 5 -> NONTERM_Valdec 
    | 6 -> NONTERM_Valdec 
    | 7 -> NONTERM_AndFunDecs 
    | 8 -> NONTERM_AndFunDecs 
    | 9 -> NONTERM_Expr 
    | 10 -> NONTERM_Expr 
    | 11 -> NONTERM_Expr 
    | 12 -> NONTERM_Expr 
    | 13 -> NONTERM_Expr 
    | 14 -> NONTERM_Expr 
    | 15 -> NONTERM_Expr 
    | 16 -> NONTERM_Expr 
    | 17 -> NONTERM_Expr 
    | 18 -> NONTERM_Expr 
    | 19 -> NONTERM_Expr 
    | 20 -> NONTERM_Expr 
    | 21 -> NONTERM_Expr 
    | 22 -> NONTERM_Expr 
    | 23 -> NONTERM_Expr 
    | 24 -> NONTERM_Expr 
    | 25 -> NONTERM_Expr 
    | 26 -> NONTERM_Expr 
    | 27 -> NONTERM_Expr 
    | 28 -> NONTERM_Expr 
    | 29 -> NONTERM_Expr 
    | 30 -> NONTERM_Expr 
    | 31 -> NONTERM_Expr 
    | 32 -> NONTERM_Expr 
    | 33 -> NONTERM_Expr 
    | 34 -> NONTERM_Expr 
    | 35 -> NONTERM_Expr 
    | 36 -> NONTERM_Expr 
    | 37 -> NONTERM_AtExpr 
    | 38 -> NONTERM_AtExpr 
    | 39 -> NONTERM_AtExpr 
    | 40 -> NONTERM_AtExpr 
    | 41 -> NONTERM_AppExpr 
    | 42 -> NONTERM_AppExpr 
    | 43 -> NONTERM_Const 
    | 44 -> NONTERM_Const 
    | 45 -> NONTERM_Const 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 50 
let _fsyacc_tagOfErrorTerminal = 48

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | COMMA  -> "COMMA" 
  | FST  -> "FST" 
  | SND  -> "SND" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | SEMICOLON  -> "SEMICOLON" 
  | COLON  -> "COLON" 
  | CONS  -> "CONS" 
  | NIL  -> "NIL" 
  | HEAD  -> "HEAD" 
  | TAIL  -> "TAIL" 
  | EQ  -> "EQ" 
  | NE  -> "NE" 
  | GT  -> "GT" 
  | LT  -> "LT" 
  | GE  -> "GE" 
  | LE  -> "LE" 
  | SEQAND  -> "SEQAND" 
  | SEQOR  -> "SEQOR" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | MOD  -> "MOD" 
  | FUN  -> "FUN" 
  | FN  -> "FN" 
  | RARROW  -> "RARROW" 
  | AND  -> "AND" 
  | TRY  -> "TRY" 
  | WITH  -> "WITH" 
  | EXN  -> "EXN" 
  | RAISE  -> "RAISE" 
  | BEGIN  -> "BEGIN" 
  | ELSE  -> "ELSE" 
  | END  -> "END" 
  | FALSE  -> "FALSE" 
  | IF  -> "IF" 
  | IN  -> "IN" 
  | LET  -> "LET" 
  | VAL  -> "VAL" 
  | NOT  -> "NOT" 
  | THEN  -> "THEN" 
  | TRUE  -> "TRUE" 
  | PRIM1 _ -> "PRIM1" 
  | CSTBOOL _ -> "CSTBOOL" 
  | NAME _ -> "NAME" 
  | CSTINT _ -> "CSTINT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | FST  -> (null : System.Object) 
  | SND  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | CONS  -> (null : System.Object) 
  | NIL  -> (null : System.Object) 
  | HEAD  -> (null : System.Object) 
  | TAIL  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NE  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | SEQAND  -> (null : System.Object) 
  | SEQOR  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | MOD  -> (null : System.Object) 
  | FUN  -> (null : System.Object) 
  | FN  -> (null : System.Object) 
  | RARROW  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | TRY  -> (null : System.Object) 
  | WITH  -> (null : System.Object) 
  | EXN  -> (null : System.Object) 
  | RAISE  -> (null : System.Object) 
  | BEGIN  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | END  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | IN  -> (null : System.Object) 
  | LET  -> (null : System.Object) 
  | VAL  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | PRIM1 _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTBOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTINT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 3us; 65535us; 0us; 2us; 7us; 8us; 102us; 103us; 3us; 65535us; 0us; 7us; 7us; 7us; 102us; 7us; 2us; 65535us; 13us; 14us; 25us; 26us; 36us; 65535us; 3us; 4us; 12us; 13us; 17us; 18us; 24us; 25us; 29us; 30us; 31us; 32us; 33us; 34us; 35us; 36us; 37us; 38us; 41us; 42us; 45us; 46us; 47us; 48us; 49us; 50us; 74us; 51us; 75us; 52us; 76us; 53us; 77us; 54us; 78us; 55us; 79us; 56us; 80us; 57us; 81us; 58us; 82us; 59us; 83us; 60us; 84us; 61us; 85us; 62us; 86us; 63us; 87us; 64us; 88us; 65us; 89us; 66us; 90us; 67us; 91us; 68us; 92us; 69us; 95us; 70us; 98us; 71us; 104us; 72us; 106us; 73us; 38us; 65535us; 3us; 27us; 12us; 27us; 17us; 27us; 24us; 27us; 27us; 108us; 28us; 109us; 29us; 27us; 31us; 27us; 33us; 27us; 35us; 27us; 37us; 27us; 41us; 27us; 45us; 27us; 47us; 27us; 49us; 27us; 74us; 27us; 75us; 27us; 76us; 27us; 77us; 27us; 78us; 27us; 79us; 27us; 80us; 27us; 81us; 27us; 82us; 27us; 83us; 27us; 84us; 27us; 85us; 27us; 86us; 27us; 87us; 27us; 88us; 27us; 89us; 27us; 90us; 27us; 91us; 27us; 92us; 27us; 95us; 27us; 98us; 27us; 104us; 27us; 106us; 27us; 36us; 65535us; 3us; 28us; 12us; 28us; 17us; 28us; 24us; 28us; 29us; 28us; 31us; 28us; 33us; 28us; 35us; 28us; 37us; 28us; 41us; 28us; 45us; 28us; 47us; 28us; 49us; 28us; 74us; 28us; 75us; 28us; 76us; 28us; 77us; 28us; 78us; 28us; 79us; 28us; 80us; 28us; 81us; 28us; 82us; 28us; 83us; 28us; 84us; 28us; 85us; 28us; 86us; 28us; 87us; 28us; 88us; 28us; 89us; 28us; 90us; 28us; 91us; 28us; 92us; 28us; 95us; 28us; 98us; 28us; 104us; 28us; 106us; 28us; 38us; 65535us; 3us; 100us; 12us; 100us; 17us; 100us; 24us; 100us; 27us; 100us; 28us; 100us; 29us; 100us; 31us; 100us; 33us; 100us; 35us; 100us; 37us; 100us; 41us; 100us; 45us; 100us; 47us; 100us; 49us; 100us; 74us; 100us; 75us; 100us; 76us; 100us; 77us; 100us; 78us; 100us; 79us; 100us; 80us; 100us; 81us; 100us; 82us; 100us; 83us; 100us; 84us; 100us; 85us; 100us; 86us; 100us; 87us; 100us; 88us; 100us; 89us; 100us; 90us; 100us; 91us; 100us; 92us; 100us; 95us; 100us; 98us; 100us; 104us; 100us; 106us; 100us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 7us; 11us; 14us; 51us; 90us; 127us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 16us; 1us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 31us; 32us; 33us; 1us; 1us; 1us; 1us; 1us; 3us; 1us; 3us; 1us; 4us; 1us; 4us; 1us; 4us; 1us; 4us; 16us; 4us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 31us; 32us; 33us; 1us; 4us; 1us; 5us; 1us; 5us; 1us; 5us; 16us; 5us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 31us; 32us; 33us; 1us; 6us; 1us; 6us; 1us; 8us; 1us; 8us; 1us; 8us; 1us; 8us; 16us; 8us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 31us; 32us; 33us; 1us; 8us; 2us; 9us; 41us; 2us; 10us; 42us; 1us; 11us; 16us; 11us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 31us; 32us; 33us; 1us; 11us; 16us; 11us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 31us; 32us; 33us; 1us; 11us; 16us; 11us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 31us; 32us; 33us; 1us; 12us; 16us; 12us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 31us; 32us; 33us; 1us; 13us; 16us; 13us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 31us; 32us; 33us; 1us; 13us; 1us; 13us; 1us; 13us; 16us; 13us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 31us; 32us; 33us; 1us; 14us; 1us; 14us; 1us; 14us; 16us; 14us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 31us; 32us; 33us; 1us; 15us; 16us; 15us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 31us; 32us; 33us; 1us; 16us; 16us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 31us; 32us; 33us; 16us; 17us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 31us; 32us; 33us; 16us; 17us; 18us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 31us; 32us; 33us; 16us; 17us; 18us; 19us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 31us; 32us; 33us; 16us; 17us; 18us; 19us; 20us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 31us; 32us; 33us; 16us; 17us; 18us; 19us; 20us; 21us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 31us; 32us; 33us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 31us; 32us; 33us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 23us; 24us; 25us; 26us; 27us; 28us; 31us; 32us; 33us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 24us; 25us; 26us; 27us; 28us; 31us; 32us; 33us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 25us; 26us; 27us; 28us; 31us; 32us; 33us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 26us; 27us; 28us; 31us; 32us; 33us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 27us; 28us; 31us; 32us; 33us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 28us; 31us; 32us; 33us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 31us; 32us; 33us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 30us; 31us; 32us; 33us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 31us; 31us; 32us; 33us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 31us; 32us; 32us; 33us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 31us; 32us; 33us; 33us; 17us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 31us; 32us; 33us; 34us; 40us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 31us; 32us; 33us; 34us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 31us; 32us; 33us; 35us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 31us; 32us; 33us; 36us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 31us; 32us; 33us; 39us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 31us; 32us; 33us; 40us; 1us; 17us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 21us; 1us; 22us; 1us; 23us; 1us; 24us; 1us; 25us; 1us; 26us; 1us; 27us; 1us; 28us; 1us; 29us; 1us; 30us; 1us; 31us; 1us; 32us; 1us; 33us; 2us; 34us; 40us; 1us; 34us; 1us; 34us; 1us; 35us; 1us; 35us; 1us; 35us; 1us; 36us; 1us; 36us; 1us; 36us; 1us; 37us; 1us; 38us; 1us; 39us; 1us; 39us; 1us; 39us; 1us; 39us; 1us; 40us; 1us; 40us; 1us; 41us; 1us; 42us; 1us; 43us; 1us; 44us; 1us; 45us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 25us; 27us; 29us; 31us; 33us; 35us; 37us; 39us; 41us; 58us; 60us; 62us; 64us; 66us; 83us; 85us; 87us; 89us; 91us; 93us; 95us; 112us; 114us; 117us; 120us; 122us; 139us; 141us; 158us; 160us; 177us; 179us; 196us; 198us; 215us; 217us; 219us; 221us; 238us; 240us; 242us; 244us; 261us; 263us; 280us; 282us; 299us; 316us; 333us; 350us; 367us; 384us; 401us; 418us; 435us; 452us; 469us; 486us; 503us; 520us; 537us; 554us; 571us; 588us; 606us; 623us; 640us; 657us; 674us; 691us; 693us; 695us; 697us; 699us; 701us; 703us; 705us; 707us; 709us; 711us; 713us; 715us; 717us; 719us; 721us; 723us; 725us; 728us; 730us; 732us; 734us; 736us; 738us; 740us; 742us; 744us; 746us; 748us; 750us; 752us; 754us; 756us; 758us; 760us; 762us; 764us; 766us; 768us; |]
let _fsyacc_action_rows = 113
let _fsyacc_actionTableElements = [|3us; 16386us; 25us; 9us; 31us; 19us; 40us; 15us; 0us; 49152us; 1us; 32768us; 33us; 3us; 16us; 32768us; 2us; 94us; 3us; 97us; 4us; 91us; 9us; 112us; 10us; 86us; 11us; 87us; 21us; 49us; 26us; 43us; 29us; 37us; 32us; 35us; 37us; 29us; 39us; 102us; 44us; 47us; 45us; 111us; 46us; 101us; 47us; 110us; 16us; 32768us; 6us; 90us; 8us; 85us; 12us; 79us; 13us; 80us; 14us; 81us; 15us; 82us; 16us; 83us; 17us; 84us; 18us; 88us; 19us; 89us; 20us; 74us; 21us; 75us; 22us; 76us; 23us; 77us; 24us; 78us; 35us; 5us; 1us; 32768us; 0us; 6us; 0us; 16385us; 3us; 16386us; 25us; 9us; 31us; 19us; 40us; 15us; 0us; 16387us; 1us; 32768us; 46us; 10us; 1us; 32768us; 46us; 11us; 1us; 32768us; 12us; 12us; 16us; 32768us; 2us; 94us; 3us; 97us; 4us; 91us; 9us; 112us; 10us; 86us; 11us; 87us; 21us; 49us; 26us; 43us; 29us; 37us; 32us; 35us; 37us; 29us; 39us; 102us; 44us; 47us; 45us; 111us; 46us; 101us; 47us; 110us; 16us; 16391us; 6us; 90us; 8us; 85us; 12us; 79us; 13us; 80us; 14us; 81us; 15us; 82us; 16us; 83us; 17us; 84us; 18us; 88us; 19us; 89us; 20us; 74us; 21us; 75us; 22us; 76us; 23us; 77us; 24us; 78us; 28us; 21us; 0us; 16388us; 1us; 32768us; 46us; 16us; 1us; 32768us; 12us; 17us; 16us; 32768us; 2us; 94us; 3us; 97us; 4us; 91us; 9us; 112us; 10us; 86us; 11us; 87us; 21us; 49us; 26us; 43us; 29us; 37us; 32us; 35us; 37us; 29us; 39us; 102us; 44us; 47us; 45us; 111us; 46us; 101us; 47us; 110us; 15us; 16389us; 6us; 90us; 8us; 85us; 12us; 79us; 13us; 80us; 14us; 81us; 15us; 82us; 16us; 83us; 17us; 84us; 18us; 88us; 19us; 89us; 20us; 74us; 21us; 75us; 22us; 76us; 23us; 77us; 24us; 78us; 1us; 32768us; 46us; 20us; 0us; 16390us; 1us; 32768us; 46us; 22us; 1us; 32768us; 46us; 23us; 1us; 32768us; 12us; 24us; 16us; 32768us; 2us; 94us; 3us; 97us; 4us; 91us; 9us; 112us; 10us; 86us; 11us; 87us; 21us; 49us; 26us; 43us; 29us; 37us; 32us; 35us; 37us; 29us; 39us; 102us; 44us; 47us; 45us; 111us; 46us; 101us; 47us; 110us; 16us; 16391us; 6us; 90us; 8us; 85us; 12us; 79us; 13us; 80us; 14us; 81us; 15us; 82us; 16us; 83us; 17us; 84us; 18us; 88us; 19us; 89us; 20us; 74us; 21us; 75us; 22us; 76us; 23us; 77us; 24us; 78us; 28us; 21us; 0us; 16392us; 6us; 16393us; 4us; 106us; 9us; 112us; 39us; 102us; 45us; 111us; 46us; 101us; 47us; 110us; 6us; 16394us; 4us; 106us; 9us; 112us; 39us; 102us; 45us; 111us; 46us; 101us; 47us; 110us; 16us; 32768us; 2us; 94us; 3us; 97us; 4us; 91us; 9us; 112us; 10us; 86us; 11us; 87us; 21us; 49us; 26us; 43us; 29us; 37us; 32us; 35us; 37us; 29us; 39us; 102us; 44us; 47us; 45us; 111us; 46us; 101us; 47us; 110us; 16us; 32768us; 6us; 90us; 8us; 85us; 12us; 79us; 13us; 80us; 14us; 81us; 15us; 82us; 16us; 83us; 17us; 84us; 18us; 88us; 19us; 89us; 20us; 74us; 21us; 75us; 22us; 76us; 23us; 77us; 24us; 78us; 42us; 31us; 16us; 32768us; 2us; 94us; 3us; 97us; 4us; 91us; 9us; 112us; 10us; 86us; 11us; 87us; 21us; 49us; 26us; 43us; 29us; 37us; 32us; 35us; 37us; 29us; 39us; 102us; 44us; 47us; 45us; 111us; 46us; 101us; 47us; 110us; 16us; 32768us; 6us; 90us; 8us; 85us; 12us; 79us; 13us; 80us; 14us; 81us; 15us; 82us; 16us; 83us; 17us; 84us; 18us; 88us; 19us; 89us; 20us; 74us; 21us; 75us; 22us; 76us; 23us; 77us; 24us; 78us; 34us; 33us; 16us; 32768us; 2us; 94us; 3us; 97us; 4us; 91us; 9us; 112us; 10us; 86us; 11us; 87us; 21us; 49us; 26us; 43us; 29us; 37us; 32us; 35us; 37us; 29us; 39us; 102us; 44us; 47us; 45us; 111us; 46us; 101us; 47us; 110us; 14us; 16395us; 8us; 85us; 12us; 79us; 13us; 80us; 14us; 81us; 15us; 82us; 16us; 83us; 17us; 84us; 18us; 88us; 19us; 89us; 20us; 74us; 21us; 75us; 22us; 76us; 23us; 77us; 24us; 78us; 16us; 32768us; 2us; 94us; 3us; 97us; 4us; 91us; 9us; 112us; 10us; 86us; 11us; 87us; 21us; 49us; 26us; 43us; 29us; 37us; 32us; 35us; 37us; 29us; 39us; 102us; 44us; 47us; 45us; 111us; 46us; 101us; 47us; 110us; 0us; 16396us; 16us; 32768us; 2us; 94us; 3us; 97us; 4us; 91us; 9us; 112us; 10us; 86us; 11us; 87us; 21us; 49us; 26us; 43us; 29us; 37us; 32us; 35us; 37us; 29us; 39us; 102us; 44us; 47us; 45us; 111us; 46us; 101us; 47us; 110us; 16us; 32768us; 6us; 90us; 8us; 85us; 12us; 79us; 13us; 80us; 14us; 81us; 15us; 82us; 16us; 83us; 17us; 84us; 18us; 88us; 19us; 89us; 20us; 74us; 21us; 75us; 22us; 76us; 23us; 77us; 24us; 78us; 30us; 39us; 1us; 32768us; 46us; 40us; 1us; 32768us; 27us; 41us; 16us; 32768us; 2us; 94us; 3us; 97us; 4us; 91us; 9us; 112us; 10us; 86us; 11us; 87us; 21us; 49us; 26us; 43us; 29us; 37us; 32us; 35us; 37us; 29us; 39us; 102us; 44us; 47us; 45us; 111us; 46us; 101us; 47us; 110us; 15us; 16397us; 6us; 90us; 8us; 85us; 12us; 79us; 13us; 80us; 14us; 81us; 15us; 82us; 16us; 83us; 17us; 84us; 18us; 88us; 19us; 89us; 20us; 74us; 21us; 75us; 22us; 76us; 23us; 77us; 24us; 78us; 1us; 32768us; 46us; 44us; 1us; 32768us; 27us; 45us; 16us; 32768us; 2us; 94us; 3us; 97us; 4us; 91us; 9us; 112us; 10us; 86us; 11us; 87us; 21us; 49us; 26us; 43us; 29us; 37us; 32us; 35us; 37us; 29us; 39us; 102us; 44us; 47us; 45us; 111us; 46us; 101us; 47us; 110us; 15us; 16398us; 6us; 90us; 8us; 85us; 12us; 79us; 13us; 80us; 14us; 81us; 15us; 82us; 16us; 83us; 17us; 84us; 18us; 88us; 19us; 89us; 20us; 74us; 21us; 75us; 22us; 76us; 23us; 77us; 24us; 78us; 16us; 32768us; 2us; 94us; 3us; 97us; 4us; 91us; 9us; 112us; 10us; 86us; 11us; 87us; 21us; 49us; 26us; 43us; 29us; 37us; 32us; 35us; 37us; 29us; 39us; 102us; 44us; 47us; 45us; 111us; 46us; 101us; 47us; 110us; 0us; 16399us; 16us; 32768us; 2us; 94us; 3us; 97us; 4us; 91us; 9us; 112us; 10us; 86us; 11us; 87us; 21us; 49us; 26us; 43us; 29us; 37us; 32us; 35us; 37us; 29us; 39us; 102us; 44us; 47us; 45us; 111us; 46us; 101us; 47us; 110us; 3us; 16400us; 22us; 76us; 23us; 77us; 24us; 78us; 3us; 16401us; 22us; 76us; 23us; 77us; 24us; 78us; 3us; 16402us; 22us; 76us; 23us; 77us; 24us; 78us; 0us; 16403us; 0us; 16404us; 0us; 16405us; 10us; 16406us; 8us; 85us; 14us; 81us; 15us; 82us; 16us; 83us; 17us; 84us; 20us; 74us; 21us; 75us; 22us; 76us; 23us; 77us; 24us; 78us; 10us; 16407us; 8us; 85us; 14us; 81us; 15us; 82us; 16us; 83us; 17us; 84us; 20us; 74us; 21us; 75us; 22us; 76us; 23us; 77us; 24us; 78us; 10us; 16408us; 8us; 85us; 14us; 81us; 15us; 82us; 16us; 83us; 17us; 84us; 20us; 74us; 21us; 75us; 22us; 76us; 23us; 77us; 24us; 78us; 10us; 16409us; 8us; 85us; 14us; 81us; 15us; 82us; 16us; 83us; 17us; 84us; 20us; 74us; 21us; 75us; 22us; 76us; 23us; 77us; 24us; 78us; 10us; 16410us; 8us; 85us; 14us; 81us; 15us; 82us; 16us; 83us; 17us; 84us; 20us; 74us; 21us; 75us; 22us; 76us; 23us; 77us; 24us; 78us; 10us; 16411us; 8us; 85us; 14us; 81us; 15us; 82us; 16us; 83us; 17us; 84us; 20us; 74us; 21us; 75us; 22us; 76us; 23us; 77us; 24us; 78us; 6us; 16412us; 8us; 85us; 20us; 74us; 21us; 75us; 22us; 76us; 23us; 77us; 24us; 78us; 0us; 16413us; 0us; 16414us; 12us; 16415us; 8us; 85us; 12us; 79us; 13us; 80us; 14us; 81us; 15us; 82us; 16us; 83us; 17us; 84us; 20us; 74us; 21us; 75us; 22us; 76us; 23us; 77us; 24us; 78us; 13us; 16416us; 8us; 85us; 12us; 79us; 13us; 80us; 14us; 81us; 15us; 82us; 16us; 83us; 17us; 84us; 18us; 88us; 20us; 74us; 21us; 75us; 22us; 76us; 23us; 77us; 24us; 78us; 14us; 16417us; 8us; 85us; 12us; 79us; 13us; 80us; 14us; 81us; 15us; 82us; 16us; 83us; 17us; 84us; 18us; 88us; 19us; 89us; 20us; 74us; 21us; 75us; 22us; 76us; 23us; 77us; 24us; 78us; 17us; 32768us; 1us; 92us; 5us; 107us; 6us; 90us; 8us; 85us; 12us; 79us; 13us; 80us; 14us; 81us; 15us; 82us; 16us; 83us; 17us; 84us; 18us; 88us; 19us; 89us; 20us; 74us; 21us; 75us; 22us; 76us; 23us; 77us; 24us; 78us; 16us; 32768us; 5us; 93us; 6us; 90us; 8us; 85us; 12us; 79us; 13us; 80us; 14us; 81us; 15us; 82us; 16us; 83us; 17us; 84us; 18us; 88us; 19us; 89us; 20us; 74us; 21us; 75us; 22us; 76us; 23us; 77us; 24us; 78us; 16us; 32768us; 5us; 96us; 6us; 90us; 8us; 85us; 12us; 79us; 13us; 80us; 14us; 81us; 15us; 82us; 16us; 83us; 17us; 84us; 18us; 88us; 19us; 89us; 20us; 74us; 21us; 75us; 22us; 76us; 23us; 77us; 24us; 78us; 16us; 32768us; 5us; 99us; 6us; 90us; 8us; 85us; 12us; 79us; 13us; 80us; 14us; 81us; 15us; 82us; 16us; 83us; 17us; 84us; 18us; 88us; 19us; 89us; 20us; 74us; 21us; 75us; 22us; 76us; 23us; 77us; 24us; 78us; 16us; 32768us; 6us; 90us; 8us; 85us; 12us; 79us; 13us; 80us; 14us; 81us; 15us; 82us; 16us; 83us; 17us; 84us; 18us; 88us; 19us; 89us; 20us; 74us; 21us; 75us; 22us; 76us; 23us; 77us; 24us; 78us; 35us; 105us; 16us; 32768us; 5us; 107us; 6us; 90us; 8us; 85us; 12us; 79us; 13us; 80us; 14us; 81us; 15us; 82us; 16us; 83us; 17us; 84us; 18us; 88us; 19us; 89us; 20us; 74us; 21us; 75us; 22us; 76us; 23us; 77us; 24us; 78us; 16us; 32768us; 2us; 94us; 3us; 97us; 4us; 91us; 9us; 112us; 10us; 86us; 11us; 87us; 21us; 49us; 26us; 43us; 29us; 37us; 32us; 35us; 37us; 29us; 39us; 102us; 44us; 47us; 45us; 111us; 46us; 101us; 47us; 110us; 16us; 32768us; 2us; 94us; 3us; 97us; 4us; 91us; 9us; 112us; 10us; 86us; 11us; 87us; 21us; 49us; 26us; 43us; 29us; 37us; 32us; 35us; 37us; 29us; 39us; 102us; 44us; 47us; 45us; 111us; 46us; 101us; 47us; 110us; 16us; 32768us; 2us; 94us; 3us; 97us; 4us; 91us; 9us; 112us; 10us; 86us; 11us; 87us; 21us; 49us; 26us; 43us; 29us; 37us; 32us; 35us; 37us; 29us; 39us; 102us; 44us; 47us; 45us; 111us; 46us; 101us; 47us; 110us; 16us; 32768us; 2us; 94us; 3us; 97us; 4us; 91us; 9us; 112us; 10us; 86us; 11us; 87us; 21us; 49us; 26us; 43us; 29us; 37us; 32us; 35us; 37us; 29us; 39us; 102us; 44us; 47us; 45us; 111us; 46us; 101us; 47us; 110us; 16us; 32768us; 2us; 94us; 3us; 97us; 4us; 91us; 9us; 112us; 10us; 86us; 11us; 87us; 21us; 49us; 26us; 43us; 29us; 37us; 32us; 35us; 37us; 29us; 39us; 102us; 44us; 47us; 45us; 111us; 46us; 101us; 47us; 110us; 16us; 32768us; 2us; 94us; 3us; 97us; 4us; 91us; 9us; 112us; 10us; 86us; 11us; 87us; 21us; 49us; 26us; 43us; 29us; 37us; 32us; 35us; 37us; 29us; 39us; 102us; 44us; 47us; 45us; 111us; 46us; 101us; 47us; 110us; 16us; 32768us; 2us; 94us; 3us; 97us; 4us; 91us; 9us; 112us; 10us; 86us; 11us; 87us; 21us; 49us; 26us; 43us; 29us; 37us; 32us; 35us; 37us; 29us; 39us; 102us; 44us; 47us; 45us; 111us; 46us; 101us; 47us; 110us; 16us; 32768us; 2us; 94us; 3us; 97us; 4us; 91us; 9us; 112us; 10us; 86us; 11us; 87us; 21us; 49us; 26us; 43us; 29us; 37us; 32us; 35us; 37us; 29us; 39us; 102us; 44us; 47us; 45us; 111us; 46us; 101us; 47us; 110us; 16us; 32768us; 2us; 94us; 3us; 97us; 4us; 91us; 9us; 112us; 10us; 86us; 11us; 87us; 21us; 49us; 26us; 43us; 29us; 37us; 32us; 35us; 37us; 29us; 39us; 102us; 44us; 47us; 45us; 111us; 46us; 101us; 47us; 110us; 16us; 32768us; 2us; 94us; 3us; 97us; 4us; 91us; 9us; 112us; 10us; 86us; 11us; 87us; 21us; 49us; 26us; 43us; 29us; 37us; 32us; 35us; 37us; 29us; 39us; 102us; 44us; 47us; 45us; 111us; 46us; 101us; 47us; 110us; 16us; 32768us; 2us; 94us; 3us; 97us; 4us; 91us; 9us; 112us; 10us; 86us; 11us; 87us; 21us; 49us; 26us; 43us; 29us; 37us; 32us; 35us; 37us; 29us; 39us; 102us; 44us; 47us; 45us; 111us; 46us; 101us; 47us; 110us; 16us; 32768us; 2us; 94us; 3us; 97us; 4us; 91us; 9us; 112us; 10us; 86us; 11us; 87us; 21us; 49us; 26us; 43us; 29us; 37us; 32us; 35us; 37us; 29us; 39us; 102us; 44us; 47us; 45us; 111us; 46us; 101us; 47us; 110us; 16us; 32768us; 2us; 94us; 3us; 97us; 4us; 91us; 9us; 112us; 10us; 86us; 11us; 87us; 21us; 49us; 26us; 43us; 29us; 37us; 32us; 35us; 37us; 29us; 39us; 102us; 44us; 47us; 45us; 111us; 46us; 101us; 47us; 110us; 16us; 32768us; 2us; 94us; 3us; 97us; 4us; 91us; 9us; 112us; 10us; 86us; 11us; 87us; 21us; 49us; 26us; 43us; 29us; 37us; 32us; 35us; 37us; 29us; 39us; 102us; 44us; 47us; 45us; 111us; 46us; 101us; 47us; 110us; 16us; 32768us; 2us; 94us; 3us; 97us; 4us; 91us; 9us; 112us; 10us; 86us; 11us; 87us; 21us; 49us; 26us; 43us; 29us; 37us; 32us; 35us; 37us; 29us; 39us; 102us; 44us; 47us; 45us; 111us; 46us; 101us; 47us; 110us; 16us; 32768us; 2us; 94us; 3us; 97us; 4us; 91us; 9us; 112us; 10us; 86us; 11us; 87us; 21us; 49us; 26us; 43us; 29us; 37us; 32us; 35us; 37us; 29us; 39us; 102us; 44us; 47us; 45us; 111us; 46us; 101us; 47us; 110us; 16us; 32768us; 2us; 94us; 3us; 97us; 4us; 91us; 9us; 112us; 10us; 86us; 11us; 87us; 21us; 49us; 26us; 43us; 29us; 37us; 32us; 35us; 37us; 29us; 39us; 102us; 44us; 47us; 45us; 111us; 46us; 101us; 47us; 110us; 16us; 32768us; 2us; 94us; 3us; 97us; 4us; 91us; 9us; 112us; 10us; 86us; 11us; 87us; 21us; 49us; 26us; 43us; 29us; 37us; 32us; 35us; 37us; 29us; 39us; 102us; 44us; 47us; 45us; 111us; 46us; 101us; 47us; 110us; 16us; 32768us; 2us; 94us; 3us; 97us; 4us; 91us; 9us; 112us; 10us; 86us; 11us; 87us; 21us; 49us; 26us; 43us; 29us; 37us; 32us; 35us; 37us; 29us; 39us; 102us; 44us; 47us; 45us; 111us; 46us; 101us; 47us; 110us; 0us; 16418us; 1us; 32768us; 4us; 95us; 16us; 32768us; 2us; 94us; 3us; 97us; 4us; 91us; 9us; 112us; 10us; 86us; 11us; 87us; 21us; 49us; 26us; 43us; 29us; 37us; 32us; 35us; 37us; 29us; 39us; 102us; 44us; 47us; 45us; 111us; 46us; 101us; 47us; 110us; 0us; 16419us; 1us; 32768us; 4us; 98us; 16us; 32768us; 2us; 94us; 3us; 97us; 4us; 91us; 9us; 112us; 10us; 86us; 11us; 87us; 21us; 49us; 26us; 43us; 29us; 37us; 32us; 35us; 37us; 29us; 39us; 102us; 44us; 47us; 45us; 111us; 46us; 101us; 47us; 110us; 0us; 16420us; 0us; 16421us; 0us; 16422us; 3us; 16386us; 25us; 9us; 31us; 19us; 40us; 15us; 1us; 32768us; 38us; 104us; 16us; 32768us; 2us; 94us; 3us; 97us; 4us; 91us; 9us; 112us; 10us; 86us; 11us; 87us; 21us; 49us; 26us; 43us; 29us; 37us; 32us; 35us; 37us; 29us; 39us; 102us; 44us; 47us; 45us; 111us; 46us; 101us; 47us; 110us; 0us; 16423us; 16us; 32768us; 2us; 94us; 3us; 97us; 4us; 91us; 9us; 112us; 10us; 86us; 11us; 87us; 21us; 49us; 26us; 43us; 29us; 37us; 32us; 35us; 37us; 29us; 39us; 102us; 44us; 47us; 45us; 111us; 46us; 101us; 47us; 110us; 0us; 16424us; 0us; 16425us; 0us; 16426us; 0us; 16427us; 0us; 16428us; 0us; 16429us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 4us; 5us; 7us; 24us; 41us; 43us; 44us; 48us; 49us; 51us; 53us; 55us; 72us; 89us; 90us; 92us; 94us; 111us; 127us; 129us; 130us; 132us; 134us; 136us; 153us; 170us; 171us; 178us; 185us; 202us; 219us; 236us; 253us; 270us; 285us; 302us; 303us; 320us; 337us; 339us; 341us; 358us; 374us; 376us; 378us; 395us; 411us; 428us; 429us; 446us; 450us; 454us; 458us; 459us; 460us; 461us; 472us; 483us; 494us; 505us; 516us; 527us; 534us; 535us; 536us; 549us; 563us; 578us; 596us; 613us; 630us; 647us; 664us; 681us; 698us; 715us; 732us; 749us; 766us; 783us; 800us; 817us; 834us; 851us; 868us; 885us; 902us; 919us; 936us; 953us; 970us; 987us; 1004us; 1005us; 1007us; 1024us; 1025us; 1027us; 1044us; 1045us; 1046us; 1047us; 1051us; 1053us; 1070us; 1071us; 1088us; 1089us; 1090us; 1091us; 1092us; 1093us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 5us; 0us; 2us; 6us; 4us; 2us; 0us; 6us; 1us; 1us; 6us; 2us; 6us; 4us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 2us; 2us; 3us; 3us; 3us; 5us; 4us; 4us; 1us; 1us; 5us; 3us; 2us; 2us; 1us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 3us; 4us; 4us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 6us; 6us; 6us; 6us; 7us; 7us; 8us; 8us; 8us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 65535us; 65535us; 65535us; 16385us; 65535us; 16387us; 65535us; 65535us; 65535us; 65535us; 65535us; 16388us; 65535us; 65535us; 65535us; 65535us; 65535us; 16390us; 65535us; 65535us; 65535us; 65535us; 65535us; 16392us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16418us; 65535us; 65535us; 16419us; 65535us; 65535us; 16420us; 16421us; 16422us; 65535us; 65535us; 65535us; 16423us; 65535us; 16424us; 16425us; 16426us; 16427us; 16428us; 16429us; |]
let _fsyacc_reductions ()  =    [| 
# 405 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.program<'a>)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startMain));
# 414 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Valdecs)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr<'a>)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "FunPar.fsy"
                                                       Prog(_1,_3) 
                   )
# 46 "FunPar.fsy"
                 : Absyn.program<'a>));
# 426 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "FunPar.fsy"
                                                       []       
                   )
# 50 "FunPar.fsy"
                 : 'Valdecs));
# 436 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.valdec<'a>)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Valdecs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "FunPar.fsy"
                                                       _1 :: _2 
                   )
# 51 "FunPar.fsy"
                 : 'Valdecs));
# 448 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr<'a>)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'AndFunDecs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "FunPar.fsy"
                                                              Fundecs((_2, _3, _5)::_6) 
                   )
# 55 "FunPar.fsy"
                 : Absyn.valdec<'a>));
# 462 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr<'a>)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "FunPar.fsy"
                                                              Valdec(_2, _4)            
                   )
# 56 "FunPar.fsy"
                 : Absyn.valdec<'a>));
# 474 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "FunPar.fsy"
                                                              Exn(ExnVar _2, None)      
                   )
# 57 "FunPar.fsy"
                 : Absyn.valdec<'a>));
# 485 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "FunPar.fsy"
                                                               []                 
                   )
# 61 "FunPar.fsy"
                 : 'AndFunDecs));
# 495 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr<'a>)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'AndFunDecs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "FunPar.fsy"
                                                               (_2, _3, _5) :: _6 
                   )
# 62 "FunPar.fsy"
                 : 'AndFunDecs));
# 509 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr<'a>)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "FunPar.fsy"
                                                               _1                                   
                   )
# 66 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 520 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr<'a>)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "FunPar.fsy"
                                                               _1                                   
                   )
# 67 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 531 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr<'a>)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr<'a>)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr<'a>)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "FunPar.fsy"
                                                               If(_2, _4, _6)                       
                   )
# 68 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 544 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr<'a>)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "FunPar.fsy"
                                                               Raise(_2, None)                      
                   )
# 69 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 555 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr<'a>)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr<'a>)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "FunPar.fsy"
                                                               TryWith(_2,ExnVar _4,_6)             
                   )
# 70 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 568 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr<'a>)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "FunPar.fsy"
                                                               Fun(_2, _4, None)                    
                   )
# 71 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 580 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr<'a>)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "FunPar.fsy"
                                                               Prim1(_1, _2, None)                  
                   )
# 72 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 592 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr<'a>)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "FunPar.fsy"
                                                               Prim2("-", CstI (0,None), _2, None)  
                   )
# 73 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 603 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr<'a>)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr<'a>)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "FunPar.fsy"
                                                               Prim2("+",  _1, _3, None)            
                   )
# 74 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 615 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr<'a>)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr<'a>)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "FunPar.fsy"
                                                               Prim2("-",  _1, _3, None)            
                   )
# 75 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 627 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr<'a>)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr<'a>)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "FunPar.fsy"
                                                               Prim2("*",  _1, _3, None)            
                   )
# 76 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 639 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr<'a>)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr<'a>)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "FunPar.fsy"
                                                               Prim2("/",  _1, _3, None)            
                   )
# 77 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 651 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr<'a>)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr<'a>)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "FunPar.fsy"
                                                               Prim2("%",  _1, _3, None)            
                   )
# 78 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 663 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr<'a>)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr<'a>)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "FunPar.fsy"
                                                               Prim2("=",  _1, _3, None)            
                   )
# 79 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 675 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr<'a>)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr<'a>)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "FunPar.fsy"
                                                               Prim2("<>", _1, _3, None)            
                   )
# 80 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 687 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr<'a>)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr<'a>)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "FunPar.fsy"
                                                               Prim2(">",  _1, _3, None)            
                   )
# 81 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 699 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr<'a>)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr<'a>)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "FunPar.fsy"
                                                               Prim2("<",  _1, _3, None)            
                   )
# 82 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 711 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr<'a>)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr<'a>)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "FunPar.fsy"
                                                               Prim2(">=", _1, _3, None)            
                   )
# 83 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 723 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr<'a>)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr<'a>)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "FunPar.fsy"
                                                               Prim2("<=", _1, _3, None)            
                   )
# 84 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 735 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr<'a>)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr<'a>)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "FunPar.fsy"
                                                               Prim2("::",_1, _3, None)           
                   )
# 85 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 747 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr<'a>)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "FunPar.fsy"
                                                               Prim1("hd", _2, None)                
                   )
# 86 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 758 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr<'a>)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "FunPar.fsy"
                                                               Prim1("tl", _2, None)                
                   )
# 87 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 769 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr<'a>)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr<'a>)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "FunPar.fsy"
                                                               AndAlso(_1, _3, None)                
                   )
# 88 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 781 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr<'a>)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr<'a>)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "FunPar.fsy"
                                                               OrElse(_1, _3, None)                 
                   )
# 89 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 793 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr<'a>)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr<'a>)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "FunPar.fsy"
                                                               Seq(_1, _3, None)                    
                   )
# 90 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 805 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr<'a>)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr<'a>)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "FunPar.fsy"
                                                               Pair(_2, _4, None)                    
                   )
# 91 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 817 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr<'a>)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "FunPar.fsy"
                                                               Fst(_3, None)                    
                   )
# 92 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 828 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr<'a>)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "FunPar.fsy"
                                                               Snd(_3, None)                    
                   )
# 93 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 839 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr<'a>)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "FunPar.fsy"
                                                               _1                 
                   )
# 97 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 850 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "FunPar.fsy"
                                                               Var (_1, None)     
                   )
# 98 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 861 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Valdecs)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr<'a>)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "FunPar.fsy"
                                                               Let(_2, _4)        
                   )
# 99 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 873 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr<'a>)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "FunPar.fsy"
                                                               _2                 
                   )
# 100 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 884 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr<'a>)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr<'a>)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "FunPar.fsy"
                                                               Call(_1, _2, None,None)     
                   )
# 104 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 896 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr<'a>)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr<'a>)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "FunPar.fsy"
                                                               Call(_1, _2, None,None)     
                   )
# 105 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 908 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "FunPar.fsy"
                                                               CstI(_1, None)               
                   )
# 109 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 919 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "FunPar.fsy"
                                                               CstB(_1, None)               
                   )
# 110 "FunPar.fsy"
                 : Absyn.expr<'a>));
# 930 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "FunPar.fsy"
                                                               CstN(None)                   
                   )
# 111 "FunPar.fsy"
                 : Absyn.expr<'a>));
|]
# 941 "FunPar.fs"
let tables () : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 51;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let Main lexer lexbuf : Absyn.program<'a> =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
